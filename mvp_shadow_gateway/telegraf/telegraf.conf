# Telegraf config for MVP Shadow Gateway
[agent]
  interval = "500ms"
  round_interval = true
  flush_interval = "1s"
  metric_batch_size = 1000
  metric_buffer_limit = 10000

# --- INPUT: Modbus TCP (S7-1200 MB_SERVER) ---
[[inputs.modbus]]
  name = "modbus"
  controller = "tcp://${MB_HOST}:502"
  slave_id = ${MB_UNIT}
  timeout = "200ms"

  # Coils (digital signals)
  coils = [
    { name = "S1_piece", address = [1] },
    { name = "S2_scrap", address = [2] },
    { name = "RUN",      address = [3] }
  ]

  # Holding registers (analog/data words)
  holding_registers = [
  { name = "Current_x10",    byte_order = "AB",   data_type = "INT16",  scale = 1.0, address = [1]  },
  { name = "Vibration_x10",  byte_order = "AB",   data_type = "INT16",  scale = 1.0, address = [2]  },
  { name = "GoodCount_lo",   byte_order = "AB",   data_type = "UINT16", scale = 1.0, address = [10] },
  { name = "GoodCount_hi",   byte_order = "AB",   data_type = "UINT16", scale = 1.0, address = [11] },
  { name = "ScrapCount_lo",  byte_order = "AB",   data_type = "UINT16", scale = 1.0, address = [12] },
  { name = "ScrapCount_hi",  byte_order = "AB",   data_type = "UINT16", scale = 1.0, address = [13] }
  ]

# --- PROCESSORS: compute GoodCount/ScrapCount DINT and Quality ---
[[processors.starlark]]
  namepass = ["modbus"]
  source = '''
def _as_int(v):
  if v == None:
    return 0
  return int(v)

def apply(metric):
  # Compose 32-bit counters from hi/lo 16-bit words
  lo_g = _as_int(metric.fields.get("GoodCount_lo"))
  hi_g = _as_int(metric.fields.get("GoodCount_hi"))
  lo_s = _as_int(metric.fields.get("ScrapCount_lo"))
  hi_s = _as_int(metric.fields.get("ScrapCount_hi"))
  good = (hi_g << 16) + lo_g
  scrap = (hi_s << 16) + lo_s
  metric.fields["GoodCount"] = good
  metric.fields["ScrapCount"] = scrap
  total = good + scrap
  if total > 0:
    metric.fields["Quality"] = good / total
  else:
    metric.fields["Quality"] = 0.0

  # Normalize x10 analogs
  cur = metric.fields.get("Current_x10")
  if cur != None:
    metric.fields["Current_pct"] = cur / 10.0
  vib = metric.fields.get("Vibration_x10")
  if vib != None:
    metric.fields["Vibration_pct"] = vib / 10.0
  return metric
'''

# --- OUTPUT: InfluxDB v2 ---
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${INFLUX_BUCKET}"
