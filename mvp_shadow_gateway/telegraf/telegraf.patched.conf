# Telegraf config (Patched) â€” tags, buffers, MQTT
[agent]
  interval = "500ms"
  round_interval = true
  flush_interval = "2s"
  metric_batch_size = 5000
  metric_buffer_limit = 50000
  omit_hostname = true

# --- INPUT: Modbus TCP ---
[[inputs.modbus]]
  name = "modbus"
  controller = "tcp://${MB_HOST}:502"
  slave_id = ${MB_UNIT}
  timeout = "200ms"
  tags = { site = "${SITE}", linha = "${LINHA}", maquina = "${MAQUINA}" }

  coil_registers = true
  [[inputs.modbus.coil]]
    name = "S1_piece"
    address = 1
    count = 1
  [[inputs.modbus.coil]]
    name = "S2_scrap"
    address = 2
    count = 1
  [[inputs.modbus.coil]]
    name = "RUN"
    address = 3
    count = 1

  holding_registers = true
  [[inputs.modbus.holding_register]]
    name = "Current_x10"
    address = 1
    count = 1
  [[inputs.modbus.holding_register]]
    name = "Vibration_x10"
    address = 2
    count = 1
  [[inputs.modbus.holding_register]]
    name = "GoodCount_lo"
    address = 10
    count = 1
  [[inputs.modbus.holding_register]]
    name = "GoodCount_hi"
    address = 11
    count = 1
  [[inputs.modbus.holding_register]]
    name = "ScrapCount_lo"
    address = 12
    count = 1
  [[inputs.modbus.holding_register]]
    name = "ScrapCount_hi"
    address = 13
    count = 1

# --- PROCESSOR: DINT/Quality/normalize ---
[[processors.starlark]]
  namepass = ["modbus"]
  source = '''
def apply(metric):
  try:
    lo_g = int(metric.fields.get("GoodCount_lo", 0))
    hi_g = int(metric.fields.get("GoodCount_hi", 0))
    lo_s = int(metric.fields.get("ScrapCount_lo", 0))
    hi_s = int(metric.fields.get("ScrapCount_hi", 0))
    good = (hi_g << 16) + lo_g
    scrap = (hi_s << 16) + lo_s
    metric.fields["GoodCount"] = good
    metric.fields["ScrapCount"] = scrap
    total = good + scrap
    metric.fields["Quality"] = float(good)/float(total) if total>0 else 0.0
    if "Current_x10" in metric.fields:
      metric.fields["Current_pct"] = float(metric.fields["Current_x10"]) / 10.0
    if "Vibration_x10" in metric.fields:
      metric.fields["Vibration_pct"] = float(metric.fields["Vibration_x10"]) / 10.0
  except Exception as e:
    pass
  return metric
'''

# --- OUTPUT: InfluxDB v2 ---
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${INFLUX_BUCKET}"
  timeout = "5s"
  content_encoding = "gzip"

# --- Optional OUTPUT: MQTT (enable with MQTT_ENABLE=true) ---
{{ if or (eq (env "MQTT_ENABLE") "true") (eq (env "MQTT_ENABLE") "TRUE") }}
[[outputs.mqtt]]
  servers = ["tcp://${MQTT_HOST}:${MQTT_PORT}"]
  topic = "${MQTT_TOPIC_PREFIX}/modbus"
  qos = 0
  client_id = "telegraf-mvp"
  data_format = "json"
  # Include tags in JSON for routing
  json_timestamp_units = "1ms"
{{ end }}
